operation equip_avatar(project: text, collection: text, token_id: integer) {
  val account = ft4.auth.authenticate();
  val token = require(
    yours.get_token(project, collection, token_id),
    "Token not found %s/%s/%s".format(project, collection, token_id)
  );
  require(
    yours.get_balance(token, account) > 0,
    "Token balance is 0 %s/%s/%s".format(project, collection, token_id)
  );
  val avatar = require(
    avatar @? { token },
    "Token is not an avatar %s/%s/%s".format(project, collection, token_id)
  );

  // Delete potential previously equipped avatar
  delete equipped_avatar @? { account };
  create equipped_avatar(account, avatar);
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
  scope = rell.meta(equip_avatar).mount_name,
  flags = []
);

operation equip_equipment(project: text, collection: text, token_id: integer) {
  val account = ft4.auth.authenticate();
  val token = require(
    yours.get_token(project, collection, token_id),
    "Token not found %s/%s/%s".format(project, collection, token_id)
  );
  require(
    yours.get_balance(token, account) > 0,
    "Token balance is 0 %s/%s/%s".format(project, collection, token_id)
  );
  val equipment = require(
    equipment @? { token },
    "Token is not an equipment %s/%s/%s".format(project, collection, token_id)
  );

  // Delete potential previously equipped tool
  delete equipped_equipment @? { account, equipment.slot };
  create equipped_equipment(account, equipment.slot, equipment);
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
  scope = rell.meta(equip_equipment).mount_name,
  flags = []
);
