@extend(yours.external.on_external_create)
function on_external_create(token: yours.token, attributes: map<text, gtv>) {
  when (token.collection.name) {
    "Pudgy Penguins" -> _create_avatar(token, attributes);
    "Equipment" -> _create_equipment(token, attributes);
    else -> return;
  }
}

function _create_avatar(token: yours.token, attributes: map<text, gtv>) {
  val avatar = avatar @? { token };
  if (avatar == null) {
    val description_gtv = attributes.get_or_null("description");
    val description = if (description_gtv != null) text.from_gtv(description_gtv) else "";

    val image_gtv = attributes.get_or_null("image");
    val image = if (image_gtv != null) text.from_gtv(image_gtv) else "";
    create avatar(token, description, image);
  }
}

function _create_equipment(token: yours.token, attributes: map<text, gtv>) {
  var equipment = equipment @? { token };
  if (equipment == null) {
    val slot_gtv = attributes.get_or_null("slot");
    if (slot_gtv == null) return;
    val slot = text.from_gtv(slot_gtv);

    val weight_gtv = attributes.get_or_null("weight");
    if (weight_gtv == null) return;
    val weight = integer.from_gtv(weight_gtv);

    val description_gtv = attributes.get_or_null("description");
    if (description_gtv == null) return;
    val description = text.from_gtv(description_gtv);

    val image_gtv = attributes.get_or_null("image");
    if (image_gtv == null) return;
    val image = text.from_gtv(image_gtv);

    equipment = create equipment(token, slot, weight, description, image);

    when (slot) {
      "head", "chest", "hands", "legs", "feets" -> {
        val defense_gtv = attributes.get_or_null("defense");
        if (defense_gtv == null) return;
        val defense = integer.from_gtv(defense_gtv);
        create armor(equipment, defense);
      };
      "weapon" -> {
        val damage_gtv = attributes.get_or_null("damage");
        if (damage_gtv == null) return;
        val damage = integer.from_gtv(damage_gtv);
        create weapon(equipment, damage);
      };
      else -> return;
    }
  }
}

@extend(yours.after_transfer)
function on_transfer(yours.token, from: ft4.accounts.account, to: ft4.accounts.account, amount: integer) {
  val avatar = avatar @? { token };
  if (avatar != null) {
    _unequip_avatar(avatar, from);
    _equip_avatar(avatar, to);
  }

  val equipment = equipment @? { token };
  if (equipment != null) {
    _unequip_tool(from, equipment);
  }
}

@extend(yours.after_mint)
function on_mint(yours.token, account: ft4.accounts.account, amount: integer) {
  val avatar = avatar @? { token };
  if (avatar != null) {
    _equip_avatar(avatar, account);
  }
}

function _unequip_avatar(avatar, account: ft4.accounts.account) {
  delete equipped_avatar @? { account, avatar };
}

function _equip_avatar(avatar, account: ft4.accounts.account) {
  if (equipped_avatar @? { account } != null) {
    // Already equips an avatar
    return;
  }
  create equipped_avatar(account, avatar);
}

function _unequip_tool(account: ft4.accounts.account, equipment) {
  delete equipped_equipment @? { account, equipment };
}
