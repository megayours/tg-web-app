struct avatar_dto {
  project: text;
  collection: text;
  id: integer;
  name: text;
  description: text;
  image: text;
}

function _avatar_dto(avatar) {
  return avatar_dto(
    project = avatar.token.collection.project.name,
    collection = avatar.token.collection.name,
    id = avatar.token.id,
    name = avatar.token.name,
    description = avatar.description,
    image = avatar.image
  );
}

query get_equipped_avatar(account_id: byte_array) {
  return equipped_avatar @? { .account.id == account_id } ( _avatar_dto($.avatar) );
}

query get_avatars(account_id: byte_array) {
  return (a: avatar, tb: yours.token_balance) @* { 
    a.token == tb.token,
    tb.account.id == account_id,
    tb.amount > 0
  } ( _avatar_dto(a) );
}

struct armor_dto {
  project: text;
  collection: text;
  id: integer;
  name: text;
  description: text;
  image: text;
  weight: integer;
  defense: integer;
}


struct weapon_dto {
  project: text;
  collection: text;
  id: integer;
  name: text;
  description: text;
  image: text;
  weight: integer;
  damage: integer;
}

function _armor_dto(armor) {
  return armor_dto(
    project = armor.equipment.token.collection.project.name,
    collection = armor.equipment.token.collection.name,
    id = armor.equipment.token.id,
    name = armor.equipment.token.name,
    description = armor.equipment.description,
    image = armor.equipment.image,
    weight = armor.equipment.weight,
    defense = armor.defense
  );
}

function _weapon_dto(weapon) {
  return weapon_dto(
    project = weapon.equipment.token.collection.project.name,
    collection = weapon.equipment.token.collection.name,
    id = weapon.equipment.token.id,
    name = weapon.equipment.token.name,
    description = weapon.equipment.description,
    image = weapon.equipment.image,
    weight = weapon.equipment.weight,
    damage = weapon.damage
  );
}

query get_equipped_equipment(account_id: byte_array) {
  val equipments = list<gtv>();

  (e: equipped_equipment, a: armor) @? { 
    e.account.id == account_id,
    e.equipment == a.equipment } ( equipments.add(_armor_dto(a).to_gtv_pretty()) );

  (e: equipped_equipment, w: weapon) @? { 
    e.account.id == account_id,
    e.equipment == w.equipment
  } ( equipments.add(_weapon_dto(w).to_gtv_pretty()) );

  return equipments;
}

query get_armor(account_id: byte_array, slot: text) {
  return (a: armor, tb: yours.token_balance) @* { 
    a.equipment.slot == slot,
    a.equipment.token == tb.token,
    tb.account.id == account_id,
    tb.amount > 0
  } ( _armor_dto(a) );
}

query get_weapon(account_id: byte_array) {
  return (w: weapon, tb: yours.token_balance) @* { 
    w.equipment.token == tb.token,
    tb.account.id == account_id,
    tb.amount > 0
  } ( _weapon_dto(w) );
}

